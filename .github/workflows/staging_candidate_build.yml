name: 'Staging candidate build'
on:
  issue_comment:
    types: [created]
jobs:
  build:
    name: 'Staging candidate build'
    if: ${{ github.event.comment.body == '/staging' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - run: |
          set -xe
          new_branch=`gh api ${{ github.event.issue.pull_request.url }} --jq '.head.ref'`
          status_check=`gh api ${{ github.event.issue.repository_url }}/commits/$new_branch/status --jq '.state'`
          if [ "$status_check" != "success" ]; then
            gh api ${{ github.event.comment.reactions.url }} -f 'content=confused'
            gh api ${{ github.event.issue.pull_request.url }}/comments -f "body=@${{ github.event.issue.user.login }} Please make sure CI is greeen"
            exit 1
          fi
          branches=`gh pr list -l staging | cut -d $'\t' -f 3 | sed "s/^/origin\//" | tr '\n' ' '`
          candidate_branches=`gh pr list -l 'staging candidate' | cut -d $'\t' -f 3 | sed "s/^/origin\//" | tr '\n' ' '`
          git fetch
          git config --global user.email "staging@indeedflex.com"
          git config --global user.name "Staging Candidate Action"
          git checkout -b staging_candidate
          set +e
          merge_staging_branches=`git merge --no-edit $branches`
          set -e
          if [ -z "${merge_staging_branches}" ];
          then
            print "{\"body\": \"@${{ github.event.issue.user.login }} unable to merge 'Staging' PRs\\\n\`\`\`\\\ngit checkout master\\\ngit merge master $branches # <-- error\\\n\`\`\`\"}" | gh api ${{ github.event.issue.comments_url }} --input -
            exit 1
          fi
          set +e
          merge_staging_candidate_branches=`git merge --no-edit $candidate_branches`
          set -e
          if [ -z "${merge_staging_candidate_branches}" ];
          then
            print "{\"body\": \"@${{ github.event.issue.user.login }} unable to merge 'Staging' PRs\\\n\`\`\`\\\ngit checkout master\\\ngit merge master $branches\\\ngit merge master $candidate_branches # <-- error\\\n\`\`\`\"}" | gh api ${{ github.event.issue.comments_url }} --input -
            exit 1
          fi
          set +e
          merge_current_branch=`git merge --no-edit origin/$new_branch`
          set -e
          if [ -z "${merge_current_branch}" ];
          then
            print "{\"body\": \"@${{ github.event.issue.user.login }} unable to merge 'Staging' PRs\\\n\`\`\`\\\ngit checkout master\\\ngit merge $branches\\\ngit merge $candidate_branches\\\ngit merge $new_branch # <-- error\\\n\`\`\`\"}" | gh api ${{ github.event.issue.comments_url }} --input -
            exit 1
          fi

          echo '{"labels":["staging candidate"]}' | gh api ${{ github.event.issue.url }}/labels --input -
          gh api ${{ github.event.comment.reactions.url }} -f 'content=rocket'
          git push -f --set-upstream origin staging_candidate

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
