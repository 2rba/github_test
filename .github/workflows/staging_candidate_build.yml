name: 'Staging candidate build'
on:
  issue_comment:
    types: [created]
jobs:
  build:
    name: 'Staging candidate build'
    if: ${{ startsWith(github.event.comment.body, '/staging') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - run: |
          set -xe
          new_branch=`gh api ${{ github.event.issue.pull_request.url }} --jq '.head.ref'`
          status_check=`gh api ${{ github.event.issue.repository_url }}/commits/$new_branch/status --jq '.state'`
          if [ "$status_check" != "success" ]; then
            gh api ${{ github.event.comment.reactions.url }} -f 'content=confused'
            gh api ${{ github.event.issue.comments_url }} -f "body=@${{ github.event.issue.user.login }} Please make sure CI is greeen"
            exit 1
          fi
          branches_list=`gh pr list -l staging | cut -d $'\t' -f 3`
          branches=`echo "$branches_list" | sed "s/^/origin\//" | tr '\n' ' '`
          candidate_branches=`gh pr list -l 'staging candidate' | cut -d $'\t' -f 3 | sed "s/^/origin\//" | tr '\n' ' '`
          git fetch
          git config --global user.email "staging@indeedflex.com"
          git config --global user.name "Staging Candidate Action"
          git checkout -b staging1
          set +e
          git merge --no-edit master $branches
          merge_staging_branches=$?
          set -e
          if [ $merge_staging_branches -ne 0 ];
          then
            error_message=""
            master_unmergable_branches=()
            master_mergable_branches=()
            for branch in $branches_list
            do
              set +e
              git reset -q --hard origin/master
              git merge -q --no-edit origin/$branch 2>/dev/null
              merge_result=$?
              set -e
              if [ $merge_result -ne 0 ];
              then
                master_unmergable_branches+=($branch)
              else
                master_mergable_branches+=($branch)
              fi
            done
            for branch in $master_unmergable_branches
            do
              details=`gh api "/repos/${{ github.repository }}/pulls?state=open&head=${{ github.repository_owner }}:$branch" -q '[.[0].number, .[0].user.login]|@tsv'`
               while IFS=$'\t' read -r number login
               do
                 error_message=`echo "$error_message\nPR #$number cannot be merged with master, please rebase/merge or remove the `Staging` label. cc @$login"`
               done < <(echo "$details")
            done

            for ((i1 = 0; i1 <= ${#master_mergable_branches[@]}; ++i1))
            do
            for ((i2 = i1+1; i2 < ${#master_mergable_branches[@]}; ++i2))
            do
              branch1=${master_mergable_branches[$i1]}
              branch2=${master_mergable_branches[$i2]}
              set +e
              git reset -q --hard origin/master
              git merge -q --no-edit origin/$branch1 origin/$branch2  2>/dev/null
              merge_result=$?
              set -e
              if [ $merge_result -ne 0 ];
              then
                details1=`gh api "/repos/${{ github.repository }}/pulls?state=open&head=${{ github.repository_owner }}:$branch1" -q '.[]|select(.labels[].name == "Staging") | [.number, .user.login]|@tsv'`
                details2=`gh api "/repos/${{ github.repository }}/pulls?state=open&head=${{ github.repository_owner }}:$branch2" -q '.[]|select(.labels[].name == "Staging") | [.number, .user.login]|@tsv'`
                while IFS=$'\t' read -r number1 login1
                do
                while IFS=$'\t' read -r number2 login2
                do
                  login=`printf "$login1\n$login2" | uniq`
                  error_message=`echo "$error_message \nPR #$number1 and PR #$number2 conflict with each other, please resolve or remove the `Staging` label. cc @$login"`
                done < <(echo "$details2")
                done < <(echo "$details1")
              fi
            done
            done

            echo "{\"body\": \"@${{ github.event.issue.user.login }} unable to merge 'Staging' PRs\n\`\`\`\ngit checkout master\ngit merge master $branches # <-- error, Staging\n\`\`\`\n$error_message\"}" | gh api ${{ github.event.issue.comments_url }} --input -
            gh api -X DELETE ${{ github.event.comment.issue_url }}/labels/staging\ candidate || true
            gh api -X DELETE ${{ github.event.comment.issue_url }}/labels/Staging || true
            exit 1
          fi

          set +e
          git merge --no-edit master $candidate_branches
          merge_staging_candidate_branches=$?
          set -e
          if [ $merge_staging_candidate_branches -ne 0 ];
          then
            printf "{\"body\": \"@${{ github.event.issue.user.login }} unable to merge 'staging candidate' PRs\\\n\`\`\`\\\ngit checkout master\\\ngit merge master $branches # Staging\\\ngit merge master $candidate_branches # <-- error, staging candidates\\\n\`\`\`\"}" | gh api ${{ github.event.issue.comments_url }} --input -
            gh api -X DELETE ${{ github.event.comment.issue_url }}/labels/staging\ candidate || true
            gh api -X DELETE ${{ github.event.comment.issue_url }}/labels/Staging || true
            exit 1
          fi
          set +e
          git merge --no-edit origin/$new_branch
          merge_current_branch=$?
          set -e
          if [ $merge_current_branch -ne 0 ];
          then
            printf "{\"body\": \"@${{ github.event.issue.user.login }} unable to merge the PR\\\n\`\`\`\\\ngit checkout master\\\ngit merge $branches # Staging\\\ngit merge $candidate_branches # staging candidates\\\ngit merge $new_branch # <-- error\\\n\`\`\`\"}" | gh api ${{ github.event.issue.comments_url }} --input -
            gh api -X DELETE ${{ github.event.comment.issue_url }}/labels/staging\ candidate || true
            gh api -X DELETE ${{ github.event.comment.issue_url }}/labels/Staging || true
            exit 1
          fi

          git commit -m "staging" --amend
          echo '{"labels":["staging candidate"]}' | gh api ${{ github.event.issue.url }}/labels --input -
          gh api ${{ github.event.comment.reactions.url }} -f 'content=rocket'
          git push -f --set-upstream origin staging1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
